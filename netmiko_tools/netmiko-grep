#!/usr/bin/env python
"""
Create grep like remote behavior on show run or command output

ToDo:
1. No support for grep options
2. Test on larger set of devices >50
*3. Write to ~/.netmiko directory (FIX)
4. Remove files (what about cache)
5. Test on windows
*6. Add username/password arguments (REMOVE?)
7. Support JSON output
8. use-cache is problem if command before wasn't running config
9. Handling failed authentications so it doesn't try to write the file
"""

from __future__ import print_function
from __future__ import unicode_literals

import argparse
import sys
import io
import os
import subprocess
import threading
try:
    from Queue import Queue
except ImportError:
    from queue import Queue
from datetime import datetime

from netmiko import ConnectHandler
from netmiko.utilities import load_yaml_file, load_devices, display_inventory
from netmiko.utilities import obtain_all_devices
from netmiko.utilities import obtain_netmiko_filename, write_tmp_file, ensure_dir_exists
from netmiko.utilities import find_netmiko_dir
from netmiko.utilities import SHOW_RUN_MAPPER
from pprint import pprint

GREP = '/bin/grep'
NETMIKO_BASE_DIR = '~/.netmiko'


def grepx(files, pattern, grep_options, use_colors=True):
    """Call system grep"""
    if not isinstance(files, (list, tuple)):
        files = [files]
    if use_colors:
        grep_options += ['--color=auto']
    grep_list = [GREP] + grep_options + [pattern] + files
    proc = subprocess.Popen(grep_list, shell=False)
    proc.communicate()
    return ''

    
def ssh_conn(device_name, a_device, cli_command, output_q):
    net_connect = ConnectHandler(**a_device)
    net_connect.enable()
    output = net_connect.send_command_expect(cli_command)
    net_connect.disconnect()
    output_q.put({device_name: output})


def parse_arguments(args):
    """Parse command-line arguments."""
    parser = argparse.ArgumentParser(description="Grep pattern search on Netmiko output")
    arg_pattern = parser.add_argument("pattern", nargs='?', help="Pattern to search for",
                                      action="store", type=str)
    arg_devices = parser.add_argument("devices", nargs='?', help="Device or group to connect to",
                                      action="store", type=str)
    parser.add_argument("--cmd", help="Remote command to execute",
                        action="store", default=None, type=str)
    parser.add_argument("--username", help="Username", action="store", type=str)
    parser.add_argument("--password", help="Password", action="store", type=str)
    parser.add_argument("--use-cache", help="Use cached files", action="store_true")
    parser.add_argument("--list-devices", help="List devices from inventory", action="store_true")
    parser.add_argument("--display-runtime", help="Display program runtime", action="store_true")
    cli_args = parser.parse_args(args)
    if not cli_args.list_devices:
        if not cli_args.devices or not cli_args.pattern:
            parser.error('Grep pattern or devices not specified.')
    return cli_args


def main(args):
    start_time = datetime.now()
    cli_args = parse_arguments(args)

    list_devices = cli_args.list_devices
    if list_devices:
        my_devices = load_devices()
        display_inventory(my_devices)
        return 0

    cli_command = cli_args.cmd
    cmd_arg = False
    if cli_command:
        cmd_arg = True
    device_or_group = cli_args.devices.strip()
    pattern = cli_args.pattern
    use_cached_files = cli_args.use_cache

    output_q = Queue()
    my_devices = load_devices()
    if device_or_group == 'all':
        device_group = obtain_all_devices(my_devices)
    else:
        try:
            devicedict_or_group = my_devices[device_or_group]
            device_group = {}
            if isinstance(devicedict_or_group, list):
                for tmp_device_name in devicedict_or_group:
                    device_group[tmp_device_name] = my_devices[tmp_device_name]
            else:
                device_group[device_or_group] = devicedict_or_group
        except KeyError:
            return "Error reading from .netmiko.cfg file." \
                   " Device or group not found: {0}".format(device_or_group)

    # Retrieve output from devices
    my_files = []
    if not use_cached_files:
        for device_name, a_device in device_group.items():
            if not cmd_arg:
                cli_command = SHOW_RUN_MAPPER.get(a_device['device_type'], 'show run')
            my_thread = threading.Thread(target=ssh_conn, args=(device_name, a_device,
                                                                cli_command, output_q))
            my_thread.start()
        # Make sure all threads have finished
        main_thread = threading.currentThread()
        for some_thread in threading.enumerate():
            if some_thread != main_thread:
                some_thread.join()
        # Write files
        while not output_q.empty():
            my_dict = output_q.get()
            netmiko_base_dir, netmiko_full_dir = find_netmiko_dir()
            ensure_dir_exists(netmiko_base_dir)
            ensure_dir_exists(netmiko_full_dir)
            for device_name, output in my_dict.items():
                file_name = write_tmp_file(device_name, output)
                my_files.append(file_name)
    else:
        for device_name in device_group:
            file_name = obtain_netmiko_filename(device_name)
            my_files.append(file_name)

    grep_options = []
    grepx(my_files, pattern, grep_options)
    if cli_args.display_runtime:
        print("Total time: {0}".format(datetime.now() - start_time))
    return 0

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
